/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package tech.pegasys.jckzg.swig;

public class CFFTSettings {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CFFTSettings(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CFFTSettings obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CKzgJNI.delete_CFFTSettings(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public CFFTSettings(long max_scale) {
    this(CKzgJNI.new_CFFTSettings(max_scale), true);
  }

  public FrVector das_fft_extentions(FrVector vals) {
    return new FrVector(CKzgJNI.CFFTSettings_das_fft_extentions(swigCPtr, this, FrVector.getCPtr(vals), vals), true);
  }

  public FrVector recover_poly_from_samples(FrVector samples) {
    return new FrVector(CKzgJNI.CFFTSettings_recover_poly_from_samples(swigCPtr, this, FrVector.getCPtr(samples), samples), true);
  }

  public Poly do_zero_poly_mul_partial(LongVector indices, long stride) {
    long cPtr = CKzgJNI.CFFTSettings_do_zero_poly_mul_partial(swigCPtr, this, LongVector.getCPtr(indices), indices, stride);
    return (cPtr == 0) ? null : new Poly(cPtr, false);
  }

}
